---
Title: Best practices for Redis Enterprise Active-Active databases
alwaysopen: false
categories:
- docs
- operate
- rs
description: A list of best practices for creating Redis Enterprise Active-Active databases.
linktitle: Best practices
weight: 23
---

Use the following guidelines and best practices to optimize your Active-Active Redis deployment for high availability, scalability, and performance while being aware of its limitations and requirements.


## Cluster planning

**Cluster Symmetry**: Ensure all nodes in the cluster are symmetrical in terms of resources and configuration. This facilitates equal load distribution and simplifies management.

 

**Mesh Configuration**: Use a symmetrical cluster configuration in a mesh topology to optimize connectivity and redundancy.

 

**Dedicated Clusters for Active-Active (A-A)**: Set up dedicated clusters specifically for A-A setups to optimize performance and reliability.

 

**Node Configuration**: In a 3-node cluster, avoid using quorum-only nodes. Synchronization should occur from replicas.

 

**Cloud Instance Type Recommendations**: Choose instance types based on sizing requirements rather than specific instance types. Ensure they meet the workload demands.

 

**CPU and Memory Overhead**: Maintain CPU overhead and memory overhead on each node to handle unexpected loads and to ensure smooth operation.

 

## Scalability

**Adding Additional Clusters**: It's possible to add more clusters to the mesh as needed.

 

**Maximum Participating Clusters**: Limit the number of clusters participating in the mesh to a maximum of 5 for optimal performance.

 

## Database planning

**Keyspace Evaluation/Data Modeling**: Regularly evaluate the keyspace and perform data modeling to optimize database performance.

 

**Data Structures and Sync Issues**: Be cautious with large hashes, lists, sets, or sorted sets, as they can cause synchronization problems. 

 

**Data Domain Splitting**: Split large members into smaller domains to facilitate easier management and better performance.

 

**Using Strings and Data Overhead**: Prefer using strings for data storage. Anticipate doubling the data set size for overhead considerations.

 

**Database Replication**: Enable database replication and consider the impacts on throughput, including synchronization. Monitor and adjust the replication backlog appropriately (default is 1% of memory).

 

**Additional Considerations for Capabilities**: Features like search and query may require additional memory for indexes and other related data structures.

 

## Network planning

**VPN for WAN**: Use VPNs to connect clusters over a Wide Area Network (WAN).

 

**Port Availability**: Ensure necessary ports are open and available on every participating cluster.

 

**Time Synchronization**: Implement a network time service (like NTP or Chrony) on every node.

 

**Sync Message Overhead**: Be aware that synchronization messages contain additional metadata beyond the key/value pairs.

 

**Compression Considerations**: Consider using compression for sync messages to optimize network bandwidth.

 

## Monitoring

 

**Key Metrics**: Monitor essential metrics to assess the health and performance of your clusters.

 

**Alerts**: Set up alerts for critical conditions to ensure prompt response to issues.

 

## Persistence and recovery

 

**Import Practices in Active-Active Setup**: Best practices for importing data in an Active-Active setup should be carefully considered.

 

**Persistence Type**: Only Append-Only File (AOF) persistence is supported; RDB is not supported.

## Limitations

 

**Non-Active-Active Database Conversion**: Conversion of non-Active-Active databases to Active-Active is not supported.

 

**Discovery Services**: No cross-cluster discovery services are available; each cluster must have its own fully qualified domain name (FQDN) and endpoint management.

 

**Kubernetes (K8s) Limitations**: If not all clusters use Kubernetes, then Kubernetes cannot utilize the Redis Enterprise Active-Active Database (REAADB).

 

**Unsupported Commands**: The `flush` command and cross-slot multi-commands like `MSET` are not supported.

 

**Hashing Policy**: The hashing policy cannot be changed after creation.

 

**Supported Capabilities**: Only certain features like Search, Query, and JSON are supported in Active-Active setups.